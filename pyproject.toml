[project]
name = "prp-todoapp"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "pydantic>=2.0.0",
]

[project.scripts]
todo-app = "src.todo_app:main"

[dependency-groups]
dev = [
    "mypy>=1.17.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.4",
]

[tool.pytest.ini_options]
pythonpath = ["."]

[tool.ruff]
line-length = 120
target-version = "py310"

# Exclude these (customize as needed)
exclude = [
  ".git",
  ".mypy_cache",
  ".ruff_cache",
  "__pycache__",
  "build",
  "dist",
  ".claude",
]

[tool.ruff.lint]
select = [
    "E",  # Error
    "W",  # Warning
    "F",  # Pyflakes
    "I",  # Isort
    "D",  # Docstrings
    "UP", # pyupgrade
    "RUF", # Ruff-specific rules
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
    "PLC", # Pylint Convention,
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
    "TRY003", # Avoid specifying long messages outside the exception class
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"  # Ban all relative imports

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"] # Ignore all docstring rules in tests

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
